MP <- st_multipoint(coords)
plot(MP, axes = TRUE)
class(MP)
print(MP)
# Multipoint en 3 dimensiones
xyz <- cbind(coords,c(17, 22, 31))
print(xyz)
MP <- st_multipoint(xyz)
print(MP)
# Colecciones de Simple Features (sfc)
# Crea varios sfg
P1 <- st_point(c(2,5)); P2 <- st_point(c(4,4)); P3 <- st_point(c(5,8))
# Junta varios sfg en un sfc (colección de simple features)
geometria1 <- st_sfc(P1,P2,P3)
# st_sfc(P1,P2, crs = 4326) Proy geográfica LatLong datum WGS84
# Asociando una geometria sfc con una tabla de atributos (data frame)
# Tabla con ID (campo num) e información adicional (tabla de atributos)
num <- c(1,2,3)
nombre <- c("Pozo","Gasolinera","Pozo")
tabpuntos <- data.frame(cbind(num,nombre))
class(tabpuntos)
View(tabpuntos)
View(tabpuntos)
print(tabpuntos)
# sf object
SFP <- st_sf(tabpuntos, geometry = geometria1)
class(SFP) # doble clase: simple feature y dataframe
print(SFP) # ver columna lista "geometry"
plot(SFP,axes=TRUE)
plot(st_geometry(SFP),axes=TRUE)
# Se puede extraer la tabla de atributos de un objeto SFC con
as.data.frame(SFP)
# Crea 3 objetos "Linestring": simple cadena de coordenadas (vértices)
# Línea L1
X1s <- c(0,3,5,8,10)
Y1s <- c(0,3,4,8,10)
Coord1 <- cbind(X1s,Y1s)
# Crea objeto de Clase Linestring
L1 <- st_linestring(Coord1)
class(L1)
print(L1)
# Línea L2
X2s <- c(2,1,1)
Y2s <- c(2,4,5)
Coord2 <- cbind(X2s,Y2s)
# Crea objeto de Clase Linestring
L2 <- st_linestring(Coord2)
# Línea 3
X3s <- c(8,8)
Y3s <- c(8,5)
Coord3 <- cbind(X3s,Y3s)
# Crea objeto de Clase Linestring
L3 <- st_linestring(Coord3)
# Crea un objeto Multilineas: conjunto de objetos Linestring
L1L2 <- st_multilinestring(list(L1,L2))
# Junta varios sfg en un sfc (colección de simple features)
geometria2 <- st_sfc(L1,L2,L3)
# Tabla de atributos
num <- c(1,2,3)
code <- c("t","t","p")
tipo <- c("Terraceria","Terraceria","Pavimentada")
tablineas <- data.frame(cbind(num,tipo,code))
print(tablineas)
# sf object
SFL <- st_sf(tablineas, geometry = geometria2)
plot(SFL,axes=TRUE)
class(SFL) # doble clase: simple feature y dataframe
print(SFL) # ver columna lista "geometry"
# Se puede extraer la tabla de atributos de un SFC con
as.data.frame(SFL)
# Se puede selecionar ciertos rasgos usando la tabla de atributos
print(SFL[tipo=="Pavimentada",])
plot(st_geometry(SFL[tipo=="Terraceria",]),col="red",axes=TRUE)
plot(st_geometry(SFL[tipo=="Pavimentada",]),add=TRUE)
## P1 Polígono forestal al SudEste
## Polygon
# Crea una cadena de coordenadas en X
X1 <- c(5,10,10,6,5)
# Crea una cadena de coordenadas en Y
# Ojo tiene que cerrar (último par de coord = primero)
Y1 <- c(0,0,5,5,0)
# Pega X y Y para crear una tabla de coordenadas
c1 <- cbind(X1,Y1)
print(c1)
## P1 Polígono forestal al SudEste
## Polygon
# Crea una cadena de coordenadas en X
X1 <- c(5,10,10,6,5)
# Crea una cadena de coordenadas en Y
# Ojo tiene que cerrar (último par de coord = primero)
Y1 <- c(0,0,5,5,0)
# Pega X y Y para crear una tabla de coordenadas
c1 <- cbind(X1,Y1)
print(c1)
class(c1)
# Crea el objeto Polygon. Un polygon es una forma simple cerrada
# eventualmente con hueco(s)
P1 <- st_polygon(list(c1))
plot(P1,axes=T)
# P2 Polígono forestal al NorOeste
# Crea una cadena de coordenadas en X
X2 <- c(0,2,6,0,0)
# Crea una cadena de coordenadas en Y
Y2 <- c(4,4,10,10,4)
# Pega X y Y para crear una tabla de coordenadas
c2 <- cbind(X2,Y2)
# Polígono hueco %%%%%%%%%%%%%% orden coordenadas !!!!!!!!!!!!!
# Crea una cadena de coordenadas en X
X3 <- c(1,1,2,2,1)
# Crea una cadena de coordenadas en Y
# La 1a y última coordenadas se repiten para "cerrar" el polígono
Y3 <- c(5,6,6,5,5)
# Pega X y Y para crear una tabla de coordenadas
c3 <- cbind(X3,Y3)
P2 <- st_polygon(list(c2,c3))
plot(P2,axes=T)
# P4 Polígono de agricultura
c3i <- c3[nrow(c3):1, ] # Invierte el orden de las coordenadas
P4 = st_polygon(list(c3i)) # Esta vez no es hueco
# P5 Polígono de área urbana
X5 <- c(0,5,6,10,10,6,2,0,0)
Y5 <- c(0,0,5,5,10,10,4,4,0)
c5 <- cbind(X5,Y5)
P5 <- st_polygon(list(c5))
plot(P5,axes=T)
# Junta varios sfg en un sfc (colección de simple features)
geometria3 <- st_sfc(P1,P2,P4,P5)
# Tabla de atributos
ID <- c(1,2,3,4)
code <- c("F","F","U","A")
tipo <- c("Bosque","Bosque","Urbano","Agricultura")
tabpol <- data.frame(cbind(ID,code,tipo))
# sf object
SFPol <- st_sf(tabpol, geometry = geometria3)
plot(SFPol,axes=TRUE)
class(SFPol) # doble clase: simple feature y dataframe
print(SFPol) # ver columna lista "geometry"
summary(SFPol)
# Se puede extraer la tabla de atributos de un SFC con
as.data.frame(SFPol)
# Se puede selecionar ciertos rasgos usando la tabla de atributos
print(SFPol[tipo=="Bosque",])
Bosque <- SFPol[tipo=="Bosque",]
plot(st_geometry(SFPol),axes=FALSE); plot(Bosque,add=TRUE, col = "green")
### Una colección puede eventualmente juntar diferentes tipos de geometría
Detodo <- st_sfc(P1,P2,L1,L2,P1)
plot(Detodo,border="red",axes=T)
install.packages("raster")
install.packages("raster", lib="C:/Program Files/R/R-4.1.1/library")
knitr::opts_chunk$set(echo = T)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(message = F)
# install.packages("raster") # eliminar comentario para instalar paquete
library(raster)
# Creamos una matriz
m <- matrix(c(1,2,3,4,2,NA,2,2,3,3,3,1),ncol=4,nrow=3,byrow=TRUE)
m
r <- raster(m)
extent(r) <- extent(c(0,4,0,3))
class(r)
print(r)
plot(r)
# Carga el paquete sf
library(sf)
dir()
dptos <- st_read("depto.shp")
dp <- st_read("depto.shp")
class(dp) # Es un simple feature "sf"
summary(dp) # un dataframe con una columna "lista" sobre la geometría
# plotea el mapa (um mapa para cada atributo)
plot(mx, axes = T,cex.axis=0.8) #cex.axis controla tamaño coordenadas
# plotea el mapa (um mapa para cada atributo)
plot(dp, axes = T,cex.axis=0.8) #cex.axis controla tamaño coordenadas
# Para plotear únicamente la geometría
plot(st_geometry(mx))
# Para plotear únicamente la geometría
plot(st_geometry(dp))
# Pregunta por el sistema de proyección
st_geometry(dp) # equivalente a print(mx$geometry)
st_crs(mx) # por código EPSG y proj4string
st_crs(dp) # por código EPSG y proj4string
# Salva el objeto en formato shape
st_write(dp,"depto.shp",delete_layer = TRUE)
st_write(dp, dsn = "dp.gpkg", delete_layer = TRUE)
library(sp)
dp_sp <- as(dp, Class = "Spatial")
# Regreso a sf con st_as_sf():
dp_sf <- st_as_sf(dp_sp, "sf")
dir()
library(raster)
# Importa imagen
barcelona <- raster("mapaBTN25_epsg25831_0391-1_COG.tif")
class(barcelona)
plot(barcelona)
extent(barcelona)
# Formatos disponibles para salvar
writeFormats()
# Salva el raster en formato LAN
writeRaster(barcelona, filename="Barca.lan", format="LAN", overwrite=TRUE,
datatype="INT2S")
# Importación de un shape con sf
library(sf)
dpt <- st_read("depto.shp")
plot(dpt["DPTO"], axes = T,cex.lab=0.8)
head(dpt)
st_bbox(dpt)
st_crs(dpt)
## Rasteriza con paquete raster
resol <- 100
# Para rasterizar usando un raster "master"
extension <- extent(c(165298.36, 1804280.29,20565.69, 1984870.73))
r <- raster(res=resol, ext=extension)
# Rasteriza con el campo GRIDCODE (as() para convertir a sp)
dptr <- rasterize(as(dpt,Class = "Spatial"), r, "GRIDCODE")
knitr::opts_chunk$set(echo = T)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(message = F)
## Rasteriza con paquete raster
resol <- 100
# Para rasterizar usando un raster "master"
extension <- extent(c(165298.36, 1804280.29,20565.69, 1984870.73))
r <- raster(res=resol, ext=extension)
# Rasteriza con el campo GRIDCODE (as() para convertir a sp)
dptr <- rasterize(as(dpt,Class = "Spatial"), r, "GRIDCODE")
m1 <- matrix(c(1,1,2,2,1,1,2,2,1,1,3,3),ncol=4,nrow=3,byrow=TRUE)
m2 <- matrix(c(1,2,3,4,2,NA,2,2,3,3,3,1),ncol=4,nrow=3,byrow=TRUE)
print(m1)
print(m2)
r1 <- raster(m1); r2 <- raster(m2)
extent(r1) <- extent(r2) <- extent(c(0,4,0,3))
### stack
colortable(r1) <- c("red","blue","green")
colortable(r2)<- c("red","blue","green","yellow")
r12 <- stack(r1,r2)
plot(r1,axes=TRUE)
plot(r2,axes=TRUE)
# Características del raster
res(r1)
dim(r12)
xmax(r1) # existen también xmax, ymin y ymax
cellStats(r1,"sum") # suma de todos los pixeles
cellStats(r1,"sd") # desv estándar de todos los pixeles
## Rasteriza con paquete raster
resol <- 100
# Para rasterizar usando un raster "master"
extension <- extent(c(165298.36, 1804280.29,20565.69, 1984870.73))
r <- raster(res=resol, ext=extension)
# Rasteriza con el campo GRIDCODE (as() para convertir a sp)
dptr <- rasterize(as(dpt,Class = "Spatial"), r, "GRIDCODE")
## Rasteriza con paquete raster
resol <- 100
# Para rasterizar usando un raster "master"
extension <- extent(c(165298.36, 1804280.29,20565.69, 1984870.73))
r <- raster(res=resol, ext=extension)
# Rasteriza con el campo GRIDCODE (as() para convertir a sp)
dptr <- rasterize(as(dpt,Class = "Spatial"), r, "GRIDCODE")
## Rasteriza con paquete raster
resol <- 100
# Para rasterizar usando un raster "master"
extension <- extent(c(165298.36, 1804280.29,20565.69, 1984870.73))
r <- raster(res=resol, ext=extension)
# Rasteriza con el campo GRIDCODE (as() para convertir a sp)
dptr <- rasterize(as(dp,Class = "Spatial"), r, "GRIDCODE")
## Rasteriza con paquete raster
resol <- 100
# Para rasterizar usando un raster "master"
extension <- extent(c(165298.36, 1804280.29,20565.69, 1984870.73))
r <- raster(res=resol, ext=extension)
# Rasteriza con el campo GRIDCODE (as() para convertir a sp)
dptr <- rasterize(as(dpt), r, "GRIDCODE")
## Rasteriza con paquete raster
resol <- 100
# Para rasterizar usando un raster "master"
extension <- extent(c(165298.36, 1804280.29,20565.69, 1984870.73))
r <- raster(res=resol, ext=extension)
# Rasteriza con el campo GRIDCODE (as() para convertir a sp)
dptr <- rasterize(as(dpt,Class = "Spatial"), r, "GRIDCODE")
knitr::opts_chunk$set(echo = T)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(message = F)
library(sf) # install.packages("sf") si necesario instalar sf
# Geometrías Simple Features (sfg)
# Point: coordenadas de un punto en 2, 3 o 4 dimensiones
P <- st_point(c(2,5)) # 2 dimensiones (XY)
class(P)
P <- st_point(c(2,5,17,44),"XYZM") # 4 dimensiones (XYZM)
class(P)
str(P)
plot(P, axes = TRUE)
# Multipoint: coordenadas de varios puntos en 2, 3 o 4 dimensiones
# Crea un vector of coordenadas en x
Xs <- c(2,4,5)
# Crea un vector of coordenadas en y
Ys <- c(5,4,8)
# Pega Xs y Ys para crear una tabla de coordenadas
coords <- cbind(Xs,Ys)
print(coords)
# Crea el objeto Multipoint (MP)
MP <- st_multipoint(coords)
plot(MP, axes = TRUE)
class(MP)
print(MP)
# Multipoint en 3 dimensiones
xyz <- cbind(coords,c(17, 22, 31))
print(xyz)
MP <- st_multipoint(xyz)
print(MP)
# Colecciones de Simple Features (sfc)
# Crea varios sfg
P1 <- st_point(c(2,5)); P2 <- st_point(c(4,4)); P3 <- st_point(c(5,8))
# Junta varios sfg en un sfc (colección de simple features)
geometria1 <- st_sfc(P1,P2,P3)
# st_sfc(P1,P2, crs = 4326) Proy geográfica LatLong datum WGS84
# Asociando una geometria sfc con una tabla de atributos (data frame)
# Tabla con ID (campo num) e información adicional (tabla de atributos)
num <- c(1,2,3)
nombre <- c("Pozo","Gasolinera","Pozo")
tabpuntos <- data.frame(cbind(num,nombre))
class(tabpuntos)
print(tabpuntos)
# sf object
SFP <- st_sf(tabpuntos, geometry = geometria1)
class(SFP) # doble clase: simple feature y dataframe
print(SFP) # ver columna lista "geometry"
plot(SFP,axes=TRUE)
plot(st_geometry(SFP),axes=TRUE)
# Se puede extraer la tabla de atributos de un objeto SFC con
as.data.frame(SFP)
# Crea 3 objetos "Linestring": simple cadena de coordenadas (vértices)
# Línea L1
X1s <- c(0,3,5,8,10)
Y1s <- c(0,3,4,8,10)
Coord1 <- cbind(X1s,Y1s)
# Crea objeto de Clase Linestring
L1 <- st_linestring(Coord1)
class(L1)
print(L1)
# Línea L2
X2s <- c(2,1,1)
Y2s <- c(2,4,5)
Coord2 <- cbind(X2s,Y2s)
# Crea objeto de Clase Linestring
L2 <- st_linestring(Coord2)
# Línea 3
X3s <- c(8,8)
Y3s <- c(8,5)
Coord3 <- cbind(X3s,Y3s)
# Crea objeto de Clase Linestring
L3 <- st_linestring(Coord3)
# Crea un objeto Multilineas: conjunto de objetos Linestring
L1L2 <- st_multilinestring(list(L1,L2))
# Junta varios sfg en un sfc (colección de simple features)
geometria2 <- st_sfc(L1,L2,L3)
# Tabla de atributos
num <- c(1,2,3)
code <- c("t","t","p")
tipo <- c("Terraceria","Terraceria","Pavimentada")
tablineas <- data.frame(cbind(num,tipo,code))
print(tablineas)
# sf object
SFL <- st_sf(tablineas, geometry = geometria2)
plot(SFL,axes=TRUE)
class(SFL) # doble clase: simple feature y dataframe
print(SFL) # ver columna lista "geometry"
# Se puede extraer la tabla de atributos de un SFC con
as.data.frame(SFL)
# Se puede selecionar ciertos rasgos usando la tabla de atributos
print(SFL[tipo=="Pavimentada",])
plot(st_geometry(SFL[tipo=="Terraceria",]),col="red",axes=TRUE)
plot(st_geometry(SFL[tipo=="Pavimentada",]),add=TRUE)
## P1 Polígono forestal al SudEste
## Polygon
# Crea una cadena de coordenadas en X
X1 <- c(5,10,10,6,5)
# Crea una cadena de coordenadas en Y
# Ojo tiene que cerrar (último par de coord = primero)
Y1 <- c(0,0,5,5,0)
# Pega X y Y para crear una tabla de coordenadas
c1 <- cbind(X1,Y1)
print(c1)
class(c1)
# Crea el objeto Polygon. Un polygon es una forma simple cerrada
# eventualmente con hueco(s)
P1 <- st_polygon(list(c1))
plot(P1,axes=T)
# P2 Polígono forestal al NorOeste
# Crea una cadena de coordenadas en X
X2 <- c(0,2,6,0,0)
# Crea una cadena de coordenadas en Y
Y2 <- c(4,4,10,10,4)
# Pega X y Y para crear una tabla de coordenadas
c2 <- cbind(X2,Y2)
# Polígono hueco %%%%%%%%%%%%%% orden coordenadas !!!!!!!!!!!!!
# Crea una cadena de coordenadas en X
X3 <- c(1,1,2,2,1)
# Crea una cadena de coordenadas en Y
# La 1a y última coordenadas se repiten para "cerrar" el polígono
Y3 <- c(5,6,6,5,5)
# Pega X y Y para crear una tabla de coordenadas
c3 <- cbind(X3,Y3)
P2 <- st_polygon(list(c2,c3))
plot(P2,axes=T)
# P4 Polígono de agricultura
c3i <- c3[nrow(c3):1, ] # Invierte el orden de las coordenadas
P4 = st_polygon(list(c3i)) # Esta vez no es hueco
# P5 Polígono de área urbana
X5 <- c(0,5,6,10,10,6,2,0,0)
Y5 <- c(0,0,5,5,10,10,4,4,0)
c5 <- cbind(X5,Y5)
P5 <- st_polygon(list(c5))
plot(P5,axes=T)
# Junta varios sfg en un sfc (colección de simple features)
geometria3 <- st_sfc(P1,P2,P4,P5)
# Tabla de atributos
ID <- c(1,2,3,4)
code <- c("F","F","U","A")
tipo <- c("Bosque","Bosque","Urbano","Agricultura")
tabpol <- data.frame(cbind(ID,code,tipo))
# sf object
SFPol <- st_sf(tabpol, geometry = geometria3)
plot(SFPol,axes=TRUE)
class(SFPol) # doble clase: simple feature y dataframe
print(SFPol) # ver columna lista "geometry"
summary(SFPol)
# Se puede extraer la tabla de atributos de un SFC con
as.data.frame(SFPol)
# Se puede selecionar ciertos rasgos usando la tabla de atributos
print(SFPol[tipo=="Bosque",])
Bosque <- SFPol[tipo=="Bosque",]
plot(st_geometry(SFPol),axes=FALSE); plot(Bosque,add=TRUE, col = "green")
### Una colección puede eventualmente juntar diferentes tipos de geometría
Detodo <- st_sfc(P1,P2,L1,L2,P1)
plot(Detodo,border="red",axes=T)
# install.packages("raster") # eliminar comentario para instalar paquete
library(raster)
# Creamos una matriz
m <- matrix(c(1,2,3,4,2,NA,2,2,3,3,3,1),ncol=4,nrow=3,byrow=TRUE)
m
r <- raster(m)
extent(r) <- extent(c(0,4,0,3))
class(r)
print(r)
plot(r)
# Carga el paquete sf
library(sf)
dp <- st_read("depto.shp")
class(dp) # Es un simple feature "sf"
summary(dp) # un dataframe con una columna "lista" sobre la geometría
# plotea el mapa (um mapa para cada atributo)
plot(dp, axes = T,cex.axis=0.8) #cex.axis controla tamaño coordenadas
# Para plotear únicamente la geometría
plot(st_geometry(dp))
# Pregunta por el sistema de proyección
st_geometry(dp) # equivalente a print(mx$geometry)
st_crs(dp) # por código EPSG y proj4string
# Salva el objeto en formato shape
st_write(dp,"depto.shp",delete_layer = TRUE)
st_write(dp, dsn = "dp.gpkg", delete_layer = TRUE)
library(sp)
dp_sp <- as(dp, Class = "Spatial")
# Regreso a sf con st_as_sf():
dp_sf <- st_as_sf(dp_sp, "sf")
library(raster)
# Importa imagen
barcelona <- raster("mapaBTN25_epsg25831_0391-1_COG.tif")
class(barcelona)
plot(barcelona)
extent(barcelona)
# Formatos disponibles para salvar
writeFormats()
# Salva el raster en formato LAN
writeRaster(barcelona, filename="Barca.lan", format="LAN", overwrite=TRUE,
datatype="INT2S")
m1 <- matrix(c(1,1,2,2,1,1,2,2,1,1,3,3),ncol=4,nrow=3,byrow=TRUE)
m2 <- matrix(c(1,2,3,4,2,NA,2,2,3,3,3,1),ncol=4,nrow=3,byrow=TRUE)
print(m1)
print(m2)
r1 <- raster(m1); r2 <- raster(m2)
extent(r1) <- extent(r2) <- extent(c(0,4,0,3))
### stack
colortable(r1) <- c("red","blue","green")
colortable(r2)<- c("red","blue","green","yellow")
r12 <- stack(r1,r2)
plot(r1,axes=TRUE)
plot(r2,axes=TRUE)
# Características del raster
res(r1)
dim(r12)
xmax(r1) # existen también xmax, ymin y ymax
cellStats(r1,"sum") # suma de todos los pixeles
cellStats(r1,"sd") # desv estándar de todos los pixeles
# Importación de un shape con sf
library(sf)
dpt <- st_read("depto.shp")
plot(dpt["DPTO"], axes = T,cex.lab=0.8)
head(dpt)
st_bbox(dpt)
st_crs(dpt)
## Rasteriza con paquete raster
resol <- 100
# Para rasterizar usando un raster "master"
extension <- extent(c(165298.36, 1804280.29,20565.69, 1984870.73))
r <- raster(res=resol, ext=extension)
# Rasteriza con el campo GRIDCODE (as() para convertir a sp)
dptr <- rasterize(as(dpt,Class = "Spatial"), r, "GRIDCODE")
## Rasteriza con paquete raster
resol <- 100
# Para rasterizar usando un raster "master"
extension <- extent(c(165298.36, 1804280.29,20565.69, 1984870.73))
r <- raster(res=resol, ext=extension)
# Rasteriza con el campo GRIDCODE (as() para convertir a sp)
dptr <- rasterize(as(dp,Class = "Spatial"), r, "GRIDCODE")
